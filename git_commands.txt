GIT & GITHUB COMMANDS


INSTALLATION

-- git init: Start git repo in local.
-- git --version : Knowing current git version installed in local disk


CONFIGURATION

The first thing you should do when you install Git is to set your user name and email address. This is important because every Git commit uses this information, and itâ€™s immutably baked into the commits you start creating:

-- git config --global user.name : Set up local configuration related to user
-- git config --global user.email: Set up local configuration related to email
-- git config --list: Checking Your Settings.


GIT FILES MOVEMENT

-- git status: Allows us to see the status of all our files and folders. 
-- git add: Helps us move files from Untracked or Unstaged to the Staged state. We can use git file-name-or-folder to add individual files and folders or git add -A to move all the files in our project (both Untrackeds and unstageds).
-- git reset HEAD: helps us take files out of the Staged state to return them to their previous state. If the files came from Unstaged, they go back there. And the same came from Untracked.
-- git commit: helps us move files from Unstaged to Staged. This is a special occasion, the files have been saved or updated in the repository. Git will ask us to leave a message to remember the changes we made and we can use the -m argument to write it (git commit -m "message").
-- git rm: This command needs any of the following arguments to be able to execute correctly:
-- git rm --cached: Move the files that we indicate to the Untracked state.
-- git rm --force: Delete Git and hard drive files. Git keeps the record of the existence of the files, so we can recover them if necessary (but we must use more advanced commands).
-- git diff: Check differences among changes executed in commits.



GIT BRANCHES

-- git branch : show all branches along with its associated master
-- git branch -d: delete one branch.
-- git checkout: commando to swich among branches and master
-- git merge: command to merge branches into master
-- git log --all --graph --decorate --oneline: git command for displaying the full path of the project.
-- alias projectree="git log --all --graph --decorate --oneline"



GITHUB CONNECTION

-- git remote add origin https://github.com/dgmgz/git_commands.git
-- git remote -v: List all remote repos related to dir.
-- git pull origin master --allow-unrelated-histories (Only the first time, when need to sync first version of repo when creating it in Github.
-- git pull origin master: Bring to local last data of master repo in Github.



GITHUB HTTPS/SSH CONNECTION

/ssh-keygen -t rsa -b 4096 -C "email" : SSH Key generation.
/eval "$(ssh-agent -s)" Check key server is running correctly. 
ssh-add -K ~/.ssh/id_rsa : Add created key to local environment

-- git remote -v: Check current connections. In case the current connection is through https is highly recommendable to establish the connection through secured shell (ssh).

-- git remote set-url origin git@github.com:xxx/xxxx.git



GIT TAGS

-- git tag: Add tags to changes in project commits
-- git tag -a anotacion -m "tag message"
-- git show-ref --tags : nos muestra el tag y el commit al que esta asociado
-- git push origin --tags : send tags to Github
-- git tag -l: show all tags related to the project.
-- git tag -f: rename tags
-- git tag -d + tag name: delete tag locally
-- git push origin :refs/tags/ tag name : delete tags in Github


GIT IGNORE

-- gitignore: https://git-scm.com/docs/gitignore


README.MD

Online Editor: https://pandao.github.io/editor.md/en.html

